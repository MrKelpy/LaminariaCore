<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LaminariaCore_Databases</name>
    </assembly>
    <members>
        <member name="T:LaminariaCore_Databases.enumeration.SQLQueryOptions">
            <summary>
            This class contains a the query options to be used in the SQLDatabaseManager, to modify
            the results received from the queries.
            </summary>
        </member>
        <member name="F:LaminariaCore_Databases.enumeration.SQLQueryOptions.IncludeHeaders">
            <summary>
            Using this option enables the inclusion of an initial headers array in the query results
            </summary>
        </member>
        <member name="F:LaminariaCore_Databases.enumeration.SQLQueryOptions.NoHeaders">
            <summary>
            Using this option prevents the query results from including the initial headers array
            </summary>
        </member>
        <member name="T:LaminariaCore_Databases.sqlserver.SQLDatabaseManager">
            <summary>
            This class is used to manage one or multiple SQL Server databases. This class will be bound
            to an SQLServerConnector object and will be used to manage the databases inside of it.
            </summary>
        </member>
        <member name="P:LaminariaCore_Databases.sqlserver.SQLDatabaseManager.Connector">
            <summary>
            The connector object used to connect to the server.
            </summary>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLDatabaseManager.#ctor(LaminariaCore_Databases.sqlserver.SQLServerConnector)">
            <summary>
            General constructor for the SQLDatabaseManager class. Takes in an SQLServerConnector object
            and binds it to the class, so that it can interact with the databases inside of it.
            </summary>
            <param name="connector">The SQLServerConnector object to use</param>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLDatabaseManager.UseDatabase(System.String)">
            <summary>
            Switches the currently active database to the one specified.
            </summary>
            <param name="name">The name of the database to use</param>
            <returns>Whether the switch was successful or not</returns>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLDatabaseManager.ExportDatabase(System.String,System.String)">
            <summary>
            Exports the specified database to the specified filepath.
            </summary>
            <param name="name">The name of the database to backup</param>
            <param name="filepath">The path to save the backup to</param>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLDatabaseManager.ImportDatabase(System.String,System.String)">
            <summary>
            Imports the specified database from the specified filepath.
            </summary>
            <param name="name">The name of the database to restore from</param>
            <param name="filepath">The path to restore the backup from</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLDatabaseManager.InsertInto(System.String,System.String[],System.Object[])">
            <summary>
            Performs a composite INSERT INTO query into the specified table, restricting the addition to specified
            fields and values.
            </summary>
            <param name="table">The table to add the content into</param>
            <param name="fields">The fields restricting the values to be added into the table</param>
            <param name="values">The values matching the restriction fields</param>
            <returns>Whether or not changes happened in the database</returns>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLDatabaseManager.InsertInto(System.String,System.Object[])">
            <summary>
            Performs a simple INSERT INTO query into the specified table, with the specified values.
            <br></br>
            This method assumes that you are inserting into all of the columns in the table. For a more specialised
            insert use the InsertInto(string, string[], dynamic[]) method.
            </summary>
            <param name="table">The table to add the values into</param>
            <param name="values">The values to add into the table</param>
            <returns>Whether or not changes happened in the database</returns>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLDatabaseManager.DeleteFrom(System.String,System.String)">
            <summary>
            Performs DELETE FROM query into the specified table, with the specified condition.
            </summary>
            <param name="table">The table to delete the data from</param>
            <param name="condition">A string specifying the condition for the entries to be deleted</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLDatabaseManager.Update(System.String,System.String,System.Object,System.String)">
            <summary>
            Updates all the fields in a set table, with the specified value, based on a condition.
            </summary>
            <param name="table">The table to update the field of</param>
            <param name="fieldToUpdate">The field to be updated</param>
            <param name="value">The value to add to the field</param>
            <param name="condition">An optional search condition to narrow down field entries</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLDatabaseManager.Update(System.String,System.String,System.Object)">
            <summary>
            Updates all the fields in a set table, with the specified value.
            </summary>
            <param name="table">The table to update the field of</param>
            <param name="fieldToUpdate">The field to be updated</param>
            <param name="value">The value to add to the field</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLDatabaseManager.Select(System.String[],System.String,System.String,LaminariaCore_Databases.enumeration.SQLQueryOptions)">
            <summary>
            Performs a SELECT query into the specified table, with the specified fields and condition.
            </summary>
            <param name="fields">The fields to select from the table</param>
            <param name="table">The table to select the fields from</param>
            <param name="condition">The condition to narrow down the results</param>
            <param name="options">The SQL Query options to modify the result</param>
            <returns>A matrix containing the results</returns>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLDatabaseManager.Select(System.String[],System.String,LaminariaCore_Databases.enumeration.SQLQueryOptions)">
            <summary>
            Performs a SELECT query into the specified table, with the specified fields.
            </summary>
            <param name="fields">The fields to select from the table</param>
            <param name="table">The table to select the fields from</param>
            <param name="options">The SQL Query options to modify the result</param>
            <returns>A matrix containing the results</returns>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLDatabaseManager.Select(System.String,System.String,LaminariaCore_Databases.enumeration.SQLQueryOptions)">
            <summary>
            Performs a 'SELECT *' query into the specified table, with the and condition.
            </summary>
            <param name="table">The table to select the fields from</param>
            <param name="condition">The condition to narrow down the results</param>
            <param name="options">The SQL Query options to modify the result</param>
            <returns>A matrix containing the results</returns>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLDatabaseManager.Select(System.String,LaminariaCore_Databases.enumeration.SQLQueryOptions)">
            <summary>
            Performs a 'SELECT *' query into the specified table. This is equivalent to doing 'SELECT * FROM [Table]'
            </summary>
            <param name="table">The table to select the fields from</param>
            <param name="options">The SQL Query options to modify the result</param>
            <returns>A matrix containing the results</returns>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLDatabaseManager.CreateView(System.String,System.String[],System.String[],System.String)">
            <summary>
            Creates a view in the database with the specified name, fields, values and condition.
            </summary>
            <param name="viewName">The name of the view to be created</param>
            <param name="fields">The fields to be included in the view</param>
            <param name="tables">The tables to get the fields from</param>
            <param name="condition">The conditional restrictions for the inclusion of values</param>
            <returns>Whether or not the view was created</returns>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLDatabaseManager.CreateView(System.String,System.String[],System.String[])">
            <summary>
            Creates a view in the database with the specified name, fields and values.
            </summary>
            <param name="viewName">The name of the view to be created</param>
            <param name="fields">The fields to be included in the view</param>
            <param name="tables">The tables to get the fields from</param>
            <returns>Whether or not the view was created</returns>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLDatabaseManager.SendQuery(System.Data.SqlClient.SqlCommand)">
            <summary>
            Sends a command into the connected database. This is a general command that will return
            the query as a Matrix.
            </summary>
            <param name="command">The MSSQL command to be sent to the database to query it</param>
            <returns>A matrix with the results</returns>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLDatabaseManager.SendQuery(System.String)">
            <summary>
            Sends a query to the database based on a query string.
            </summary>
            <param name="query">The query to be send into the database</param>
            <returns>A matrix with the results</returns>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLDatabaseManager.SendNonQuery(System.String)">
            <summary>
            Sends a non-query (no expected results) instruction to the database.
            </summary>
            <param name="query">The query to send</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLDatabaseManager.RunSqlScript(System.String)">
            <summary>
            Reads the content of an SQL script and executes it through a transaction,
            separated by "GO" statements.
            </summary>
            <param name="filepath">The filepath to the script</param>
            <returns>The total number of rows affected</returns>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLDatabaseManager.GetColumnsForTable(System.String)">
            <summary>
            Returns an array containing the names of all the tables in the database.
            </summary>
            <param name="tableName">The name of the table to get the columns for</param>
            <returns>The column names for the table</returns>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLDatabaseManager.ArrayToQueryString(System.String[])">
            <summary>
            Converts an array of strings into a query string, with each element separated by a comma.
            </summary>
            <param name="array">The array to be converted</param>
            <returns>The query string to be used to specify the query objects</returns>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLDatabaseManager.CreatePlaceholdersArrayString(System.Int32,System.String)">
            <summary>
            Creates all of the placeholders to for a certain array about to be used in a query.
            <br></br>
            The placeholders are in the format of @p0, @p1, @p2, etc with the aim of being replaced
            by the actual typed values in the array.
            </summary>
            <param name="arraySize">The size of the array to convert into placeholders</param>
            <param name="parameterName">The name of the parameter to consider</param>
            <returns>The string containing the placeholders for the array</returns>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLDatabaseManager.AddValuesIntoCommand(System.Data.SqlClient.SqlCommand,System.String,System.Object[])">
            <summary>
            Adds the values into the command as parameters, with the placeholders being @p0, @p1, @p2, etc.
            <br></br>
            This method is meant to be used alongside the CreatePlaceholdersArrayString(int) method, to insert
            typed values into the query.
            </summary>
            <param name="command">The command to be sent to the server, with the placeholders up</param>
            <param name="parameterName">The name of the parameter to change</param>
            <param name="values">The values to be replaced by the placeholders</param>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLDatabaseManager.ProcessFields(System.String[],System.String)">
            <summary>
            Checks if the fields array is only a "*", in which case it should return the "*" to use the
            SQL * identifier. Otherwise, it should return the placeholders for the array.
            </summary>
            <param name="fields">The fields to be processed</param>
            <param name="parameterName">The parameter name to create the placeholder with</param>
            <returns>Either * or a placeholder string.</returns>
        </member>
        <member name="T:LaminariaCore_Databases.sqlserver.SQLServerConnector">
            <summary>
            This class is used to connect to a SQL Server database. Handles the connection
            and disconnection of the database, and serves as the parent for other classes.
            
            <span style="color: red;">
            Keep in mind that this class should either be instantiated once across the program
            or the closing of the connections should be closely monitored.
            </span>
            
            </summary>
        </member>
        <member name="P:LaminariaCore_Databases.sqlserver.SQLServerConnector.ConnectionString">
            <summary>
            The connection string used to connect to the database.
            </summary>
        </member>
        <member name="P:LaminariaCore_Databases.sqlserver.SQLServerConnector.Connection">
            <summary>
            The connection object used to access the database
            </summary>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLServerConnector.#ctor(System.String)">
            <summary>
            "Manual" constructor for the SQLServerConnector class. Takes in a connection string
            and connects to the database using it.
            </summary>
            <param name="connectionString">SQL Server Formatted Connection String</param>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLServerConnector.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            "Automatic" constructor for the SQLServerConnector class. Takes in a few arguments
            in order to create the connection to the database.
            </summary>
            <param name="server">The location of the server to connect to (IP)(ServerType)</param>
            <param name="database">The database name to use</param>
            <param name="username">The username to authenticate as</param>
            <param name="password">The password to use to connect</param>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLServerConnector.#ctor(System.String,System.String)">
            <summary>
            "Automatic" constructor for the SQLServerConnector class. Takes in a few arguments
            and assumes the connection should be done through Windows Credentials.
            </summary>
            <param name="server">The location of the server to connect to (IP)(ServerType)</param>
            <param name="database">The database name to use</param>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLServerConnector.Dispose">
            <summary>
            Disposes of the connection to the database.
            </summary>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLServerConnector.Disconnect">
            <summary>
            Disconnects from the server closing down any open connections. <br></br>
            This is equivalent to calling Dispose().
            </summary>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLServerConnector.Reconnect">
            <summary>
            Reconnects to the server using the last used connection string.
            </summary>
        </member>
        <member name="M:LaminariaCore_Databases.sqlserver.SQLServerConnector.ConnectTo(System.String)">
            <summary>
            Connects to an SQL Server given a connection string.
            </summary>
            <param name="connectionString">SQL Server Formatted Connection String</param>
        </member>
    </members>
</doc>
