<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LaminariaCore_Winforms</name>
    </assembly>
    <members>
        <member name="T:LaminariaCore_Winforms.common.abstraction.AbstractBaseOperations">
            <summary>   
            This abstract class implements every method that is used by both the FileManager and Section classes,
            due to a similarity in functionality.
            </summary>
        </member>
        <member name="P:LaminariaCore_Winforms.common.abstraction.AbstractBaseOperations.OperationsTargetPath">
            <summary>
            The target path to perform these operations on. This will act as the "root" of all operations.
            </summary>
        </member>
        <member name="P:LaminariaCore_Winforms.common.abstraction.AbstractBaseOperations.RootPath">
            <summary>
            The root path of the file system.
            </summary>
        </member>
        <member name="M:LaminariaCore_Winforms.common.abstraction.AbstractBaseOperations.#ctor(System.String)">
            <summary>
            Main constructor for the AbstractBaseOperations class. Defines the
            operations target path.
            </summary>
            <param name="operationsTargetPath">@link{AbstractBaseOperations.OperationsTargetPath}</param>
        </member>
        <member name="M:LaminariaCore_Winforms.common.abstraction.AbstractBaseOperations.AddSection(System.String)">
            <summary>
            Adds a new section (Directory) into the file system.
            </summary>
            <param name="section">The relative path of the section, relative to the root.</param>
            <returns>The section that was just added</returns>
        </member>
        <member name="M:LaminariaCore_Winforms.common.abstraction.AbstractBaseOperations.RemoveSection(System.String)">
            <summary>
            Removes a section (Directory) from the file system.
            </summary>
            <param name="section">The relative path of the section, relative to the root.</param>
        </member>
        <member name="M:LaminariaCore_Winforms.common.abstraction.AbstractBaseOperations.GetAllSections">
            <summary>
            Recursively searches for every section in the file system, and returns an array containing them.
            </summary>
            <returns>A Section[] containing the Section objects representing the directories.</returns>
        </member>
        <member name="M:LaminariaCore_Winforms.common.abstraction.AbstractBaseOperations.GetAllTopLevelSections">
            <summary>
            Searches for every top level section in the file system, and returns an array containing them.
            </summary>
            <returns>A Section[] containing the Section objects representing the directories.</returns>
        </member>
        <member name="M:LaminariaCore_Winforms.common.abstraction.AbstractBaseOperations.GetSectionsNamed(System.String)">
            <summary>
            Gets all the sections (Directories) in the file system, and returns the ones matching
            the specified name.
            </summary>
            <param name="name">The name of the sections to search for.</param>
            <returns>A Section[] containing the objects representing each directory in the file system.</returns>
        </member>
        <member name="M:LaminariaCore_Winforms.common.abstraction.AbstractBaseOperations.GetFirstSectionNamed(System.String)">
            <summary>
            Gets all the sections (Directories) in the file system, and returns the first one with a matching name.
            </summary>
            <param name="name">The name of the sections to search for.</param>
            <returns>A Section object representing the directory in the file system.</returns>
        </member>
        <member name="M:LaminariaCore_Winforms.common.abstraction.AbstractBaseOperations.AddDocument(System.String)">
            <summary>
            Adds a document into the current Section if it doesn't exist.
            </summary>
            <param name="documentName">The name of the document to add into the section</param>
            <returns>The path of the document that was just added</returns>
        </member>
        <member name="M:LaminariaCore_Winforms.common.abstraction.AbstractBaseOperations.RemoveDocument(System.String)">
            <summary>
            Deletes a document from within a section, based on its relative path.
            </summary>
            <param name="documentName">The name of the document to remove from the section</param>
        </member>
        <member name="M:LaminariaCore_Winforms.common.abstraction.AbstractBaseOperations.GetAllDocuments">
            <summary>
            Iterates over every item stemming from the relative root used, filters out the files
            and returns an array with their full paths.
            </summary>
            <returns>A string[] containing every file stemming down from the root</returns>
        </member>
        <member name="M:LaminariaCore_Winforms.common.abstraction.AbstractBaseOperations.GetAllTopLevelDocuments">
            <summary>
            Iterates over every top level item in the operations target path and
            returns an array with their full paths.
            </summary>
            <returns>A string[] containing every top level file at the target path</returns>
        </member>
        <member name="M:LaminariaCore_Winforms.common.abstraction.AbstractBaseOperations.GetDocumentsNamed(System.String)">
            <summary>
            Iterates over all the files stemming from the relative root and returns every name matched file.
            </summary>
            <param name="filename">The filename to match with</param>
            <returns>A string[] with all the files that matched the filename</returns>
        </member>
        <member name="M:LaminariaCore_Winforms.common.abstraction.AbstractBaseOperations.GetFirstDocumentNamed(System.String)">
            <summary>
            Iterates over all the files stemming from the relative root and returns the first name matched file.
            </summary>
            <param name="filename">The filename to match with</param>
            <returns>A string containing the full path of the first matched file</returns>
        </member>
        <member name="T:LaminariaCore_Winforms.common.FileManager">
            <summary>
            This class implements an interface to interact with a program's file structure
            in a more convenient way.
            </summary>
        </member>
        <member name="M:LaminariaCore_Winforms.common.FileManager.#ctor(System.String)">
            <summary>
            Main constructor for the FileManager class. Sets the root path to the specified value.
            If not specified, use the AppData/.PROGRAM-NAME folder.
            </summary>
            <param name="root">The path to the root directory of the file system.</param>
        </member>
        <member name="T:LaminariaCore_Winforms.common.Section">
            <summary>
            This class represents a Section inside the File System provided by the FileManager class. It can't
            be instantiated by the user, and will only be accessible through the FileManager.
            </summary>
        </member>
        <member name="P:LaminariaCore_Winforms.common.Section.SectionFullPath">
            <summary>
            The full path for the section.
            </summary>
        </member>
        <member name="P:LaminariaCore_Winforms.common.Section.Name">
            <summary>
            The section name.
            </summary>
        </member>
        <member name="P:LaminariaCore_Winforms.common.Section.SimpleName">
            <summary>
            The simplified name of the section. This is the name without the relative path.
            </summary>
        </member>
        <member name="M:LaminariaCore_Winforms.common.Section.#ctor(System.String,System.String)">
            <summary>
            Main constructor for the Section class. Takes in the root of the file system and the full
            path of the section.
            </summary>
            <param name="sectionPath">The full path of the section.</param>
            <param name="root">The full root path of the filesystem</param>
        </member>
        <member name="T:LaminariaCore_Winforms.forms.extensions.ControlExtensions">
            <summary>
            This class is used to extend the functionality of every control in Windows Forms.
            </summary>
        </member>
        <member name="M:LaminariaCore_Winforms.forms.extensions.ControlExtensions.SendToOriginal(System.Windows.Forms.Control)">
            <summary>
            Searches for the original parent of the control inside OriginalParentCache, and sets the control's
            parent back to it.
            </summary>
            <param name="self">The control the method is being called from</param>
        </member>
        <member name="M:LaminariaCore_Winforms.forms.extensions.ControlExtensions.IsCached(System.Windows.Forms.Control)">
            <summary>
            Checks whether the control is already contained in the cache.
            </summary>
            <param name="self">The control the method is being called from</param>
            <returns>Whether the control is cached or not.</returns>
        </member>
        <member name="M:LaminariaCore_Winforms.forms.extensions.ControlExtensions.ForceCache(System.Windows.Forms.Control)">
            <summary>
            Force the caching of the original parent of the control.
            <br></br>
            You're most likely doing something wrong if you're using this method. It shouldn't be
            used by you in 99% of the cases, but it's here for that 1%.
            If you're using this method, make sure you know what you're doing.
            </summary>
            <param name="self">The control the method is being called from</param>
        </member>
        <member name="T:LaminariaCore_Winforms.forms.extensions.PanelExtensions">
            <summary>
            This class implements methods to extend the functionality of Panels in Windows Forms.
            </summary>
        </member>
        <member name="M:LaminariaCore_Winforms.forms.extensions.PanelExtensions.AddAllFrom(System.Windows.Forms.Panel,System.Windows.Forms.Panel)">
            <summary>
            This extension method is used to add the contents from an external panel into
            the current panel.
            </summary>
            <param name="self">The panel the method is being called from</param>
            <param name="targetPanel">The panel to add the contents of</param>
        </member>
        <member name="M:LaminariaCore_Winforms.forms.extensions.PanelExtensions.SetAllFrom(System.Windows.Forms.Panel,System.Windows.Forms.Panel)">
            <summary>
            Replaces all the controls from the current panel with the controls from the target panel.
            </summary>
            <param name="self">The panel the method is being called from</param>
            <param name="targetPanel">The panel to clone the contents of</param>
        </member>
        <member name="T:LaminariaCore_Winforms.internals.caches.OriginalParentCache">
            <summary>
            This singleton internal class implements a cache that stores every control's original
            parent, so that the dynamic loading/unloading of active components can be managed smoothly.
            </summary>
        </member>
        <member name="F:LaminariaCore_Winforms.internals.caches.OriginalParentCache.INSTANCE">
            <summary>
            The instance used to access the class, since it is a singleton.
            </summary>
        </member>
        <member name="F:LaminariaCore_Winforms.internals.caches.OriginalParentCache.cache">
            <summary>
            The cache containing the original parents of every control.
            </summary>
        </member>
        <member name="M:LaminariaCore_Winforms.internals.caches.OriginalParentCache.AddToCache(System.Windows.Forms.Control)">
            <summary>
            Adds the specified control to the cache, in the form of a name:parent mapping.
            </summary>
            <param name="control">The control to add to the cache.</param>
            <returns>Whether or not the control was successfully added to cache.</returns>
        </member>
        <member name="M:LaminariaCore_Winforms.internals.caches.OriginalParentCache.GetParentOf(System.String)">
            <summary>
            Returns the parent of the specified control, as it was before it was added to the cache.
            </summary>
            <param name="name">The name of the control to look for in the cache</param>
            <returns>The cached original parent for the specified name</returns>
        </member>
        <member name="M:LaminariaCore_Winforms.internals.caches.OriginalParentCache.Contains(System.String)">
            <summary>
            Checks if the specified control is cached.
            </summary>
            <param name="name">The control name to check for in the cache.</param>
            <returns>Whether the control exists in the cache or not.</returns>
        </member>
    </members>
</doc>
