<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LaminariaCore_General</name>
    </assembly>
    <members>
        <member name="T:LaminariaCore_General.utils.FileUtils">
            <summary>
            This class provides a wide variety of methods for quick and easy writing/reading from files.
            </summary>
        </member>
        <member name="M:LaminariaCore_General.utils.FileUtils.EnsurePath(System.String,System.IO.FileAttributes)">
            <summary>
            Ensures the existence of the given path, be it a directory or a file.
            </summary>
            <param name="path">The path to ensure the existence of</param>
            <param name="pathType">
            Whether the path is a file or directory. If not specified, it will be automatically determined.
            This parameter accepts either a FileAttributes.Directory or FileAttributes.Normal type.
            </param>
        </member>
        <member name="M:LaminariaCore_General.utils.FileUtils.DumpToFile(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Writes all the given data in bulk to the specified filepath.
            </summary>
            <param name="path">The filepath to dump the data into</param>
            <param name="data">A List(string) containing the lines to write into the file.</param>
        </member>
        <member name="M:LaminariaCore_General.utils.FileUtils.AppendToFile(System.String,System.String)">
            <summary>
            Appends a given line to the end of the file.
            </summary>
            <param name="path">The filepath to append the data into</param>
            <param name="data">A string containing the line to write into the file.</param>
        </member>
        <member name="M:LaminariaCore_General.utils.FileUtils.ReadFromFile(System.String)">
            <summary>
            Reads all the lines from a file and returns them in the form of a list.
            </summary>
            <param name="path">The filepath to read the data from</param>
            <returns>A list containing all the lines in the file</returns>
        </member>
        <member name="M:LaminariaCore_General.utils.FileUtils.DumpToFileBinary(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Writes all the given data in bulk, as binary information, into the specified filepath.
            </summary>
            <param name="path">The path to write into</param>
            <param name="data">The primitive values to write into the file.</param>
        </member>
        <member name="M:LaminariaCore_General.utils.FileUtils.ReadFromFileBinary(System.String)">
            <summary>
            Reads the data in the specified filepath and returns it in the form of a list with
            all the values as strings.
            </summary>
            <param name="path">The filepath to read the data from</param>
            <returns>The primitive values in a list of strings</returns>
        </member>
        <member name="T:LaminariaCore_General.utils.NetworkUtils">
            <summary>
            This class contains a bunch of useful methods for interacting with the network
            </summary>
        </member>
        <member name="M:LaminariaCore_General.utils.NetworkUtils.GetExternalIPAddress">
            <summary>
            Returns the External IPv4 Address.
            </summary>
            <returns>A string containing the ip addr</returns>
        </member>
        <member name="M:LaminariaCore_General.utils.NetworkUtils.GetLocalIPAddress">
            <summary>
            Returns the Local IPv4 Address.
            </summary>
            <returns>A string containing the ip addr</returns>
        </member>
        <member name="M:LaminariaCore_General.utils.NetworkUtils.GetNextAvailablePort(System.Int32)">
            <summary>
            Determines the next available port based on a given starting port, up
            until port 65534. This is done by creating a TCP socket and trying to bind
            the port to the local IP Address.
            </summary>
            <param name="startingPort">The port to start the binding checks on</param>
            <returns>Either the starting port or the next available port after it</returns>
        </member>
        <member name="M:LaminariaCore_General.utils.NetworkUtils.PortInUse(System.Int32)">
            <summary>
            Checks if a port is open or not, by accessing the list of active TCP listeners
            and checking if any endpoint has the same port as the one we're checking.
            </summary>
            <param name="port">The port to check</param>
            <returns>Whether the port is open or not</returns>
        </member>
        <member name="M:LaminariaCore_General.utils.NetworkUtils.IsWifiConnected">
            <summary>
            Checks if the current machine has internet connectivity.
            </summary>
            <returns>True if it is, false if not, or an error occured.</returns>
        </member>
        <member name="T:LaminariaCore_General.utils.PathUtils">
            <summary>
            This class aims to provide a set of utilities to work with paths.
            </summary>
        </member>
        <member name="M:LaminariaCore_General.utils.PathUtils.NormalizePath(System.String)">
            <summary>
            Normalizes a path, changing it to a common format.
            Every path should be formatted as such.: "path/to/directory"
            </summary>
            <param name="path">The path to normalize.</param>
            <returns>The normalized path.</returns>
        </member>
        <member name="M:LaminariaCore_General.utils.PathUtils.EqualsPath(System.String,System.String)">
            <summary>
            Compares two paths, and returns true if they are equal.
            </summary>
            <param name="path">The target path, the one being called through the string</param>
            <param name="path2">The target to compare the first path with</param>
            <returns>Whether the paths are equal or not</returns>
        </member>
        <member name="T:LaminariaCore_General.utils.ProcessUtils">
            <summary>
            This class implements a bunch of methods to manipulate processes
            </summary>
        </member>
        <member name="M:LaminariaCore_General.utils.ProcessUtils.KillProcessAndChildren(System.Diagnostics.Process,System.Int32)">
            <summary>
            Kill a process and all of its children immediately.
            </summary>
            <param name="proc">The process where this method is being called from</param>
            <param name="pid">Process ID.</param>
        </member>
        <member name="M:LaminariaCore_General.utils.ProcessUtils.CreateProcess(System.String,System.String,System.String)">
            <summary>
            Creates a Java jar process, redirecting its STDOUT and STDERR to process it.
            </summary>
            <param name="java">The java version path to run</param>
            <param name="args">The java args to run the jar with</param>
            <param name="workingDirectory">The working directory of the process</param>
            <returns>The process started</returns>
        </member>
        <member name="M:LaminariaCore_General.utils.ProcessUtils.GetProcessById(System.Int32)">
            <summary>
            Gets a process object from its ID if it is still running.
            </summary>
            <param name="id">The ID of the process to get</param>
            <returns>The Process, if it is still running. Else, null</returns>
        </member>
        <member name="T:LaminariaCore_General.utils.Utf8StringWriter">
            <summary>
            This class extends the functionality of the StringWriter class, defining its
            encoding in utf-8.
            </summary>
        </member>
        <member name="T:LaminariaCore_General.utils.XmlUtils">
            <summary>
            This class offers a multitude of useful XML methods that make serializing, creating and
            reading XML easier.
            <remarks>The type parameters used in this class need to be of a Serializable.</remarks>
            </summary>
        </member>
        <member name="M:LaminariaCore_General.utils.XmlUtils.SerializeToString``1(System.Object)">
            <summary>
            Serializes an object into an XML string.
            </summary>
            <typeparam name="T">A serializable class type</typeparam>
            <param name="obj">The object to serialize</param>
            <returns>The serialized XML text</returns>
        </member>
        <member name="M:LaminariaCore_General.utils.XmlUtils.SerializeToFile``1(System.String,System.Object)">
            <summary>
            Serializes an object into a given file automatically.
            </summary>
            <typeparam name="T">A serializable class type</typeparam>
            <param name="filepath">The filepath to add the text to</param>
            <param name="obj">The object to serialize</param>
        </member>
        <member name="M:LaminariaCore_General.utils.XmlUtils.DeserializeFromFile``1(System.String)">
            <summary>
            Deserializes an XML object from a file.
            </summary>
            <typeparam name="T">The object type to deserialize the file contents into</typeparam>
            <param name="filepath">The path to the file to be deserialized</param>
            <returns>An instance of T with the serialized information.</returns>
        </member>
        <member name="M:LaminariaCore_General.utils.XmlUtils.DeserializeFromString``1(System.String)">
            <summary>
            Deserializes the string into an object.
            </summary>
            <typeparam name="T">The type to deserialize the string into</typeparam>
            <param name="str">The string to deserialize</param>
            <returns>An instance of T with the serialized information.</returns>
        </member>
    </members>
</doc>
